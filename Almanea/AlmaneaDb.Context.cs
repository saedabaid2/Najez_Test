//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Almanea
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AlmaneaDbEntities : DbContext
    {
        public AlmaneaDbEntities()
            : base("name=AlmaneaDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<OrderDisplay> OrderDisplays { get; set; }
        public virtual DbSet<tblAdditionalWork> tblAdditionalWorks { get; set; }
        public virtual DbSet<tblComplainHistory> tblComplainHistories { get; set; }
        public virtual DbSet<tblComplainType> tblComplainTypes { get; set; }
        public virtual DbSet<tblDelivery> tblDeliveries { get; set; }
        public virtual DbSet<tblDeliveryService> tblDeliveryServices { get; set; }
        public virtual DbSet<tblDirection> tblDirections { get; set; }
        public virtual DbSet<tblEmail> tblEmails { get; set; }
        public virtual DbSet<tblLaborInactive> tblLaborInactives { get; set; }
        public virtual DbSet<tblMultipleComplain> tblMultipleComplains { get; set; }
        public virtual DbSet<tblOrderAdditionalService> tblOrderAdditionalServices { get; set; }
        public virtual DbSet<tblOrderAdditionalWork> tblOrderAdditionalWorks { get; set; }
        public virtual DbSet<tblOrderComplain> tblOrderComplains { get; set; }
        public virtual DbSet<tblOrderHistory> tblOrderHistories { get; set; }
        public virtual DbSet<tblOrderReleas> tblOrderReleases { get; set; }
        public virtual DbSet<tblOrder> tblOrders { get; set; }
        public virtual DbSet<tblOrderService> tblOrderServices { get; set; }
        public virtual DbSet<tblOrderUserLink> tblOrderUserLinks { get; set; }
        public virtual DbSet<tblProviderSettingMapper> tblProviderSettingMappers { get; set; }
        public virtual DbSet<tblProviderTimeSlot> tblProviderTimeSlots { get; set; }
        public virtual DbSet<tblProviderWorkinHour> tblProviderWorkinHours { get; set; }
        public virtual DbSet<tblPushNotification> tblPushNotifications { get; set; }
        public virtual DbSet<tblResetOrder> tblResetOrders { get; set; }
        public virtual DbSet<tblServiceMapper> tblServiceMappers { get; set; }
        public virtual DbSet<tblSetting> tblSettings { get; set; }
        public virtual DbSet<tblSM> tblSMS { get; set; }
        public virtual DbSet<tblTeamCapacity> tblTeamCapacities { get; set; }
        public virtual DbSet<tblTeamCapacityCalculation> tblTeamCapacityCalculations { get; set; }
        public virtual DbSet<tblUnit> tblUnits { get; set; }
        public virtual DbSet<tblUserGroupCompany> tblUserGroupCompanies { get; set; }
        public virtual DbSet<AggregatedCounter> AggregatedCounters { get; set; }
        public virtual DbSet<Hash> Hashes { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<JobParameter> JobParameters { get; set; }
        public virtual DbSet<JobQueue> JobQueues { get; set; }
        public virtual DbSet<List> Lists { get; set; }
        public virtual DbSet<Schema> Schemata { get; set; }
        public virtual DbSet<Server> Servers { get; set; }
        public virtual DbSet<Set> Sets { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<Counter> Counters { get; set; }
        public virtual DbSet<tblAccountType> tblAccountTypes { get; set; }
        public virtual DbSet<Admin_Pages> Admin_Pages { get; set; }
        public virtual DbSet<Admin_Page_Details> Admin_Page_Details { get; set; }
        public virtual DbSet<tblService> tblServices { get; set; }
        public virtual DbSet<LabourCapacity> LabourCapacities { get; set; }
        public virtual DbSet<tblAdminUser> tblAdminUsers { get; set; }
        public virtual DbSet<tblLocation> tblLocations { get; set; }
        public virtual DbSet<OrdersAssigned> OrdersAssigneds { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<Service_Items> Service_Items { get; set; }
        public virtual DbSet<Inventoy_Details> Inventoy_Details { get; set; }
        public virtual DbSet<Inventory_Master> Inventory_Master { get; set; }
    
        public virtual ObjectResult<Sp_multipleComplaintype_Result> Sp_multipleComplaintype(Nullable<int> complainid)
        {
            var complainidParameter = complainid.HasValue ?
                new ObjectParameter("Complainid", complainid) :
                new ObjectParameter("Complainid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_multipleComplaintype_Result>("Sp_multipleComplaintype", complainidParameter);
        }
    
        public virtual ObjectResult<Sp_OrderCount_Result> Sp_OrderCount(Nullable<int> typeId, Nullable<int> groupId)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_OrderCount_Result>("Sp_OrderCount", typeIdParameter, groupIdParameter);
        }
    
        public virtual ObjectResult<Sp_OrderCountbydate_Result> Sp_OrderCountbydate(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_OrderCountbydate_Result>("Sp_OrderCountbydate", dateParameter);
        }
    
        public virtual ObjectResult<Sp_OrderCountbydate2_Result> Sp_OrderCountbydate2(string date)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_OrderCountbydate2_Result>("Sp_OrderCountbydate2", dateParameter);
        }
    
        public virtual ObjectResult<Sp_OrderCountbydate3_Result> Sp_OrderCountbydate3(string date)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_OrderCountbydate3_Result>("Sp_OrderCountbydate3", dateParameter);
        }
    
        public virtual int Sp_OrderCountforSale(Nullable<int> tYPEID, string gROUPID, Nullable<int> sUPPLIER, Nullable<System.DateTime> fROMDATE, Nullable<System.DateTime> tODATE, Nullable<int> cOMPANYID)
        {
            var tYPEIDParameter = tYPEID.HasValue ?
                new ObjectParameter("TYPEID", tYPEID) :
                new ObjectParameter("TYPEID", typeof(int));
    
            var gROUPIDParameter = gROUPID != null ?
                new ObjectParameter("GROUPID", gROUPID) :
                new ObjectParameter("GROUPID", typeof(string));
    
            var sUPPLIERParameter = sUPPLIER.HasValue ?
                new ObjectParameter("SUPPLIER", sUPPLIER) :
                new ObjectParameter("SUPPLIER", typeof(int));
    
            var fROMDATEParameter = fROMDATE.HasValue ?
                new ObjectParameter("FROMDATE", fROMDATE) :
                new ObjectParameter("FROMDATE", typeof(System.DateTime));
    
            var tODATEParameter = tODATE.HasValue ?
                new ObjectParameter("TODATE", tODATE) :
                new ObjectParameter("TODATE", typeof(System.DateTime));
    
            var cOMPANYIDParameter = cOMPANYID.HasValue ?
                new ObjectParameter("COMPANYID", cOMPANYID) :
                new ObjectParameter("COMPANYID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_OrderCountforSale", tYPEIDParameter, gROUPIDParameter, sUPPLIERParameter, fROMDATEParameter, tODATEParameter, cOMPANYIDParameter);
        }
    
        public virtual ObjectResult<Sp_OrderCountforSale_03092020_Result> Sp_OrderCountforSale_03092020(Nullable<int> typeId, Nullable<int> groupId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_OrderCountforSale_03092020_Result>("Sp_OrderCountforSale_03092020", typeIdParameter, groupIdParameter, fromDateParameter, todateParameter);
        }
    }
}
